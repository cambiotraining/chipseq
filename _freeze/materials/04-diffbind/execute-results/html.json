{
  "hash": "1c9afd1bfbc0e682a93f1a3be3a9233e",
  "result": {
    "markdown": "---\ntitle: Differential binding\nknitr:\n  opts_chunk: \n    purl: true\n    cache: true\n  opts_knit:\n    root.dir: \"../course_files/participants/\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='../_cache/unnamed-chunk-1_2c879d4d624a0e1d51d3d372b1bffdbd'}\n\n:::\n\n\n\n::: {.callout-tip}\n#### Learning Objectives\n\n- Bulleted list of learning objectives\n:::\n\n\n## Differential binding\n\nWhen multiple conditions are available in our ChIP design (e.g. healthy vs disease, wild-type vs mutant, treated vs control, different cell types, ...), we may want to investigate whether certain peaks are differentially bound between them. \n\nFinding differentially bound regions in the genome is analogous to identifying differentially expressed genes in RNA-seq data. \nIn both cases we are dealing with count data summarised over features (genes/transcripts in the case of RNA-seq and peaks in the case of ChIP-seq). \nIn both cases the biological replicates show larger variability than technical replicates, and the negative binomial model is suitable to compare binding affinities accross samples. \n\nThere are a number of differential expression packages in R that use the negative binomial model e.g. `DESeq2` and `edgeR`. \nThese methods are wrapped in the `DiffBind` package that is geared towards analysing differential binding in ChIP-seq data and provides a number of analytical plots as well.\n\nAs usual, we start by loading our packages:\n\n\n::: {.cell hash='../_cache/packages_1c1ba9bf62d0364cf2949ab3b12975c5'}\n\n```{.r .cell-code}\n# Packages ----\n\n# load packages\nlibrary(rtracklayer) # for importing BED/GFF/etc.\nlibrary(plyranges)   # for working with GenomicRanges\nlibrary(ChIPseeker)  # to annotate peaks\nlibrary(profileplyr) # for profile heatmaps\nlibrary(DiffBind)    # for ChIP peak analysis\nlibrary(ggplot2)\n\n# change the default ggplot theme\ntheme_set(theme_classic(base_size = 14))\n```\n:::\n\n\n\n## Reading peaks\n\nAs is common with Bioconductor packages, the `DiffBind` package uses its own data structure, called a `dba` object. \nTo create this, we need to create a CSV file with the following information: \n\n- TODO long list of columns\n\nWe've already created this for you, so all we need to do is read it in: \n\n\n::: {.cell hash='../_cache/read_samplesheet_95a1b971a85c0a4d0a8cf4867c5708a9'}\n\n```{.r .cell-code}\n# read DiffBind samplesheet\nsamplesheet <- read.csv(\"diffbind_samplesheet.csv\")\n\nhead(samplesheet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       SampleID                   Tissue Antibody Condition Treatment Replicate\n1  brd4_e2_rep1 MCF7 breast cancer cells     BRD4        NA        e2         1\n2  brd4_e2_rep2 MCF7 breast cancer cells     BRD4        NA        e2         2\n3  brd4_e2_rep3 MCF7 breast cancer cells     BRD4        NA        e2         3\n4 brd4_veh_rep1 MCF7 breast cancer cells     BRD4        NA       veh         1\n5 brd4_veh_rep2 MCF7 breast cancer cells     BRD4        NA       veh         2\n6 brd4_veh_rep3 MCF7 breast cancer cells     BRD4        NA       veh         3\n                                                                    bamReads\n1  preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_e2_rep1.mLb.clN.sorted.bam\n2  preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_e2_rep2.mLb.clN.sorted.bam\n3  preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_e2_rep3.mLb.clN.sorted.bam\n4 preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_veh_rep1.mLb.clN.sorted.bam\n5 preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_veh_rep2.mLb.clN.sorted.bam\n6 preprocessed/nf-chipseq/bwa/mergedLibrary/brd4_veh_rep3.mLb.clN.sorted.bam\n       ControlID\n1  mcf7_input_e2\n2  mcf7_input_e2\n3  mcf7_input_e2\n4 mcf7_input_veh\n5 mcf7_input_veh\n6 mcf7_input_veh\n                                                                   bamControl\n1  preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_e2.mLb.clN.sorted.bam\n2  preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_e2.mLb.clN.sorted.bam\n3  preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_e2.mLb.clN.sorted.bam\n4 preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_veh.mLb.clN.sorted.bam\n5 preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_veh.mLb.clN.sorted.bam\n6 preprocessed/nf-chipseq/bwa/mergedLibrary/mcf7_input_veh.mLb.clN.sorted.bam\n                                                                                    Peaks\n1  preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_e2_rep1_peaks.broadPeak\n2  preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_e2_rep2_peaks.broadPeak\n3  preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_e2_rep3_peaks.broadPeak\n4 preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_veh_rep1_peaks.broadPeak\n5 preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_veh_rep2_peaks.broadPeak\n6 preprocessed/nf-chipseq/bwa/mergedLibrary/macs2/broadPeak/brd4_veh_rep3_peaks.broadPeak\n  PeakCaller\n1        bed\n2        bed\n3        bed\n4        bed\n5        bed\n6        bed\n```\n:::\n:::\n\n\nOnce we have this samplesheet, creating the `dba` object is relatively simple (note in this case we're only loading the BRD4 samples): \n\n\n::: {.cell hash='../_cache/read_dba_a679bdf5cfa9fc5543e074f4707b6458'}\n\n```{.r .cell-code}\n# create DBA object for BRD4 antibody\nbrd4_dba <- dba(sampleSheet = samplesheet[samplesheet$Antibody == \"BRD4\", ])\n\nbrd4_dba\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 Samples, 12395 sites in matrix (48128 total):\n             ID                   Tissue Treatment Replicate Intervals\n1  brd4_e2_rep1 MCF7 breast cancer cells        e2         1     20240\n2  brd4_e2_rep2 MCF7 breast cancer cells        e2         2     11144\n3  brd4_e2_rep3 MCF7 breast cancer cells        e2         3      2599\n4 brd4_veh_rep1 MCF7 breast cancer cells       veh         1      2922\n5 brd4_veh_rep2 MCF7 breast cancer cells       veh         2     37306\n6 brd4_veh_rep3 MCF7 breast cancer cells       veh         3      2107\n```\n:::\n:::\n\n\nWithout doing any further analysis, we can already produce a correlation heatmap using the `plot()` function:\n\n\n::: {.cell hash='../_cache/plot_raw_5d10c6f3d6866565e42e2fa8de0a4cd3'}\n\n```{.r .cell-code}\n# correlation plot using caller score\nplot(brd4_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/plot_raw-1.png){width=672}\n:::\n:::\n\n\nThis correlation is calculated based on the score given to each peak, in our case the score that MACS assigns to each called peak. \nThis is not necessarily the best way to look at the correlation between samples, as it doesn't take into account the actual counts in each peak (that will come later), but it's a good starting point to look at the correlation between our samples. \n\nIn our case, we can see that our replicates are not clustering per treatment, suggesting other effects may have played a role in the ChIP profiles. \n\nThe next step is to count reads in each peak (which is the raw data that will be used to estimate the differential binding). \nThis step takes a long time, so be prepared to wait if you're running this on your data. \n\n\n::: {.cell hash='../_cache/count_436bdf494b5fe82dc76a529b26f72900'}\n\n```{.r .cell-code}\n# count reads overlapping peaks \n# this takes a long time to run! So we load pre-computed one\n# brd4_dba <- dba.count(brd4_dba)\nbrd4_dba <- readRDS(\"preprocessed/r_objects/brd4_dba.count.rds\")\n\n# correlation plot based on raw counts\nplot(brd4_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/count-1.png){width=672}\n:::\n:::\n\n\nNow, when we call the `plot()` function the correlation heatmap is instead done from the counts assigned to each peak (rather than peak scores). \nIn this case, we get a clearer clustering of samples by treatment, which is a good sign!\n\nThe next step in the analysis is to normalise the counts. \nThere are different methods to normalise the counts, and this is discussed at length by the DiffBind authors (see section 7 in the [documentation](https://bioconductor.org/packages/devel/bioc/vignettes/DiffBind/inst/doc/DiffBind.pdf)). \nIn summary, these authors argue for caution when applying normalisation methods used for RNA-seq analysis, as those methods assume that most features (peaks in our case, genes in the RNA-seq case) are _not_ differentially expressed/bound between conditions. \nHowever, this assumption may not make biological sense in the case of ChIP-seq, as some conditions may dramatically affect the binding profiles genome-wide. \n\nThis may certainly be the case for BRD4, as we've seen from our profile plots that binding is generally higher for E2-treated samples compared to controls. \nFor this reason, the default normalisation method used by `DiffBind` is a simple library size normalisation, which we apply below. \n\n\n::: {.cell hash='../_cache/normalise_2d021557b532d8bbe414e1c326997d15'}\n\n```{.r .cell-code}\n# normalise counts by library size (default)\nbrd4_dba <- dba.normalize(brd4_dba, normalize = DBA_NORM_LIB)\n```\n:::\n\n\nOne final step before we fit the model that will test for differential binding, is to set the \"contrast\" of our experiment. \nThis is where we can set which factors should be taken into account when modelling the counts and which comparisons we want to make. \nThere is quite a lot of flexibility in setting these models, which is detailed in the [package's documentation](https://bioconductor.org/packages/devel/bioc/vignettes/DiffBind/inst/doc/DiffBind.pdf) as well as [the documentation for `DEseq2`](http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html), which is used behind the scenes. \n\nIn our case, we only have one factor (treatment) with two conditions (\"e2\" and \"veh\"). \nTherefore, we can set our contrast like so: \n\n\n::: {.cell hash='../_cache/contrast_5a2d1af2eecc7478b18a1adbd4bb672e'}\n\n```{.r .cell-code}\n# set contrast \nbrd4_dba <- dba.contrast(brd4_dba, \n                         design = ~ Treatment,\n                         reorderMeta = list(Treatment = \"veh\"),\n                         minMembers = 3)\n```\n:::\n\n\nWhere: \n\n- `design` uses R's standard model formula syntax to define the variables used to model our counts, in our case \"Treatment\" (this is one of the columns from our CSV samplesheet). \n- `reorderMeta` is used to set the reference level for our Treatment variable; in our case it makes sense to set \"veh\" as the reference level (control). The default reference level would be whichever comes first alphabetically. \n- `minMembers` defines the minimum number of replicates required to run the analysis. The default value is in fact 3, but we've set it anyway to be explicit. \n\nFinally, we can fit the statical model using `DEseq2`'s statistical machinery (the other option is to use `DBA_EDGER`, which would use that package instead - the results are very comparable). \n\n\n::: {.cell hash='../_cache/analysis_82477774baa396279e7b9d54da957c58'}\n\n```{.r .cell-code}\n# run the analysis\nbrd4_dba <- dba.analyze(brd4_dba, \n                        method = DBA_DESEQ2,\n                        bBlacklist = FALSE, \n                        bGreylist = FALSE)\n```\n:::\n\n\nNote that we've set two options to `FALSE`: \n\n- `bBlacklist` turns off the behaviour of trying to identify our genome and apply an exclusion list to it. \n  We've already done this when we did peak calling with the `nf-core/chipseq` workflow, so there is no need to do this again. \n- `bGreylist` turns off the behaviour of estimating a so-called \"greylist\". \n  We talk more about this below. \n  \nFinally, with the analysis done, it's time to extract our results, which are returned as a familiar `GRanges` object: \n\n\n::: {.cell hash='../_cache/report_2fe018f2af363f0497dc82612358dea1'}\n\n```{.r .cell-code}\n# extract diffbound sites\n# keep all peaks, even those that are non-significant\nbrd4_diffbound <- dba.report(brd4_dba, th = 1)\n\nbrd4_diffbound\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 12331 ranges and 6 metadata columns:\n          seqnames            ranges strand |      Conc   Conc_e2  Conc_veh\n             <Rle>         <IRanges>  <Rle> | <numeric> <numeric> <numeric>\n   7853         21 42365357-42365757      * |   4.56334   5.53382   0.00000\n   7548         20 53865352-53865752      * |   5.10739   2.25210   6.00409\n   7493         20 53660691-53661091      * |   4.63297   5.54957   1.47889\n   3675         15 74816468-74816868      * |   4.46242   5.40868   0.68917\n   7263         20 44714529-44714929      * |   3.12993   4.12993   0.00000\n    ...        ...               ...    ... .       ...       ...       ...\n  12064 KI270754.1         3352-3752      * |   1.47054   1.44409   1.49652\n   7710         20 63330620-63331020      * |   1.41217   1.40120   1.42307\n   1682         11 31509716-31510116      * |   1.53077   1.53102   1.53053\n   5879         19 16535344-16535744      * |   1.55841   1.55877   1.55805\n  12034 KI270467.1         3240-3640      * |   5.08000   4.95839   5.19215\n                Fold     p-value        FDR\n           <numeric>   <numeric>  <numeric>\n   7853      4.43696 8.71201e-07 0.00756452\n   7548     -3.35432 1.33026e-06 0.00756452\n   7493      3.47205 5.27113e-06 0.01612934\n   3675      3.94028 5.67285e-06 0.01612934\n   7263      4.44204 8.38315e-06 0.01906832\n    ...          ...         ...        ...\n  12064 -0.000219130    0.994758          1\n   7710 -0.000213502    0.994952          1\n   1682  0.000186362    0.995030          1\n   5879  0.000171415    0.995530          1\n  12034 -0.002416403    1.000000          1\n  -------\n  seqinfo: 44 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n\nWe can use some `plyranges` syntax to obtain a summary of how many peaks are differentially bound and in which direction:\n\n\n::: {.cell hash='../_cache/count_diffbound_375721f218ac13b660a86bc05bfbfebd'}\n\n```{.r .cell-code}\n# count how many up or down\nbrd4_diffbound |> \n  filter(FDR < 0.05) |> \n  summarise(up = sum(Fold > 0), down = sum(Fold < 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 1 row and 2 columns\n         up      down\n  <integer> <integer>\n1        30         4\n```\n:::\n:::\n\n\nThe result is not particularly striking. \nIt suggests that not many peaks are differentially bound between conditions. \nLet's investigate our results a bit further with some visualisations. \n\n\n## Differential binding visualisation \n\n\n::: {.cell hash='../_cache/header_b2560d672742f9454b863c6a6a07772c'}\n\n:::\n\n\nThe `DiffBind` package provides several plotting functions, illustrated below. \n\nWe start with a PCA, which shows that samples separate by treatment along PC2, but not PC1 (the axis of greatest variance). \nThis suggests that factors other than the treatment influenced our ChIP results. \nThis may explain the relatively low number of differentially bound peaks. \n\n\n::: {.cell hash='../_cache/plot_pca_4ef43ef3046a354a26eaac6cb2f76b7b'}\n\n```{.r .cell-code}\n# PCA plot\ndba.plotPCA(brd4_dba, label = DBA_REPLICATE)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/plot_pca-1.png){width=672}\n:::\n:::\n\n\nAnother common visualisation used in differential analysis is the MA plot.\nThis shows the average normalised read counts on the X-axis and the log-fold change on the Y-axis. \nThis plot can be used to assess the effect of the normalisation on the data (red trend line, which we want to be close to the zero horizontal line) as well as highlighting the significant differentially bound regions (pink points).\n\n\n::: {.cell hash='../_cache/plot_ma_3ea5461abe54633c83a4149a9539f4bb'}\n\n```{.r .cell-code}\n# MA plot\ndba.plotMA(brd4_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/plot_ma-1.png){width=672}\n:::\n:::\n\n\nYou can also generate this plot with `ggplot2`, if you want to customise it further:\n\n\n::: {.cell hash='../_cache/unnamed-chunk-2_1ab8ba03825f45badfc3e2133b016ace'}\n\n```{.r .cell-code}\n# can also do it with ggplot2\nbrd4_diffbound |> \n  as.data.frame() |> \n  mutate(sig = ifelse(FDR < 0.05, Fold, NA)) |> \n  ggplot(aes(Conc, Fold)) + \n  geom_point(colour = \"grey\") + \n  geom_point(aes(y = sig), colour = \"black\") +\n  geom_hline(yintercept = 0, linetype = \"dashed\")\n```\n:::\n\n\nAnother common visualisation is a volcano plot, which shows the log-fold change on the x-axis and p-values on the y-axis (we don't show this one, to save space). \n\n\n::: {.cell hash='../_cache/plot_volcano_41e6fac8b8d966edaf8b9783d7a685db'}\n\n```{.r .cell-code}\n# volcano plot\ndba.plotVolcano(brd4_dba)\n\n# can also do it with ggplot2\nbrd4_diffbound |> \n  as.data.frame() |> \n  mutate(sig = ifelse(FDR < 0.05, Fold, NA)) |> \n  ggplot(aes(Fold, -log10(FDR))) + \n  geom_point(colour = \"grey\") + \n  geom_point(aes(x = sig), colour = \"black\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\")\n```\n:::\n\n\nWe can also produce a boxplot of normalised counts, which shows the distribution of counts in the whole dataset, and on the subset of peaks with significant differential binding (both upwards and downwards). \n\n\n::: {.cell hash='../_cache/boxplot_9cdb6840ee34eeafa126c7b5635bf109'}\n\n```{.r .cell-code}\n# boxplot of normalised counts\ndba.plotBox(brd4_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/boxplot-1.png){width=672}\n:::\n:::\n\n\nIn our case, this boxplot is interesting, as it illustrates that, overall, BRD4 in E2-treated cells seems to have higher binding affinity than in control cells. \nThis might either be biologically reasonable, or it may be an issue with data quality (recall the variation in FRiP scores we've seen earlier and the fact that the PCA separates samples from different treatments along PC1). \nAs we are not experts in this biological system, we refrain from making further comments on this. \n\nFinally, we can visualise the scaled counts in the differentially bound peaks as a heatmap: \n\n\n::: {.cell hash='../_cache/heatmap_e9442d6237928baf4e268389dda570c2'}\n\n```{.r .cell-code}\n# heatmap of DB peaks\ndba.plotHeatmap(brd4_dba, contrast = 1, \n                correlations = FALSE, scale = \"row\")\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/heatmap-1.png){width=672}\n:::\n:::\n\n\n## Pipeline\n\n\n::: {.cell hash='../_cache/pipeline_header_a83c788ed4449b807b9832a300b3204a'}\n\n:::\n\n\nAlthough we've broken our analysis down into individual steps, it's worth nothing that because each function of the `DiffBind` workflow always returns the `dba` object with further elements added to it, we can put it all together using `|>` pipes:\n\n\n::: {.cell hash='../_cache/unnamed-chunk-3_cef52bae0cff096abad03280c8ffabf7'}\n\n```{.r .cell-code}\n# full pipeline - do not run, it will take too long!\nbrd4_dba <- dba(sampleSheet = samplesheet[samplesheet$Antibody == \"BRD4\", ]) |> \n  dba.count() |> \n  dba.normalize(normalize = DBA_NORM_LIB) |> \n  dba.contrast(reorderMeta = list(Treatment = \"veh\")) |> \n  dba.analyze(method = DBA_DESEQ2,\n              bBlacklist = FALSE, \n              bGreylist = FALSE)\n\n# extract diffbound sites\nbrd4_diffbound <- dba.report(brd4_dba, th = 1)\n```\n:::\n\n\n\n:::{.callout-exercise}\n\n\n::: {.cell hash='../_cache/ex_header_d7453343a48d6f696e36781c6e936b76'}\n\n:::\n\n\nRun the differential binding analysis for the H2Bub1 ChIP.\nBecause counting reads assigned to each peak takes too long to run, we start by loading a pre-processed file.\n\nStarting from this object, build a pipeline to run the rest of the steps in the analysis.\nWe already provide a code skeleton for you to do this, with some \"FIXME\" for you to correct. \n\n<details><summary>Code skeleton</summary>\n\nNote, this code is provided in the accompanying course materials script. \nIt's only shown here for reference. \n\n\n::: {.cell hash='../_cache/ex_h2bub1_697cc6312e7a767182e0e33ce07bb333'}\n\n```{.r .cell-code}\n# !!!FIX!!! run diffbind analysis\nh2bub1_dba <- readRDS(\"preprocessed/r_objects/h2bub1_dba.count.rds\") |> \n  FIXME\n  \n# !!!FIX!!! extract results as a GRanges object\nbrd4_diffbound <- FIXME \n\n# !!!FIX!!! correlation heatmap for the samples\nFIXME\n\n# !!!FIX!!! PCA plot\nFIXME\n\n# !!!FIX!!! MA plot\nFIXME \n\n# !!!FIX!!! boxplot\nFIXME\n\n# !!!FIX!!! heatmap of differentially bound peaks\nFIXME\n```\n:::\n\n\n</details>\n\n:::{.callout-answer collapse=true}\n\nThe full pipeline is shown here (but we don't run all of it, as it would take too long):\n\n\n::: {.cell hash='../_cache/ex_answer_part1_e0ac075570087328c359eda3d5d36568'}\n\n```{.r .cell-code}\n# full pipeline\nh2bub1_dba <- dba(sampleSheet = samplesheet[samplesheet$Antibody == \"H2Bub1\", ]) |> \n  dba.count() |> \n  dba.normalize() |> \n  dba.contrast(reorderMeta = list(Treatment = \"veh\")) |> \n  dba.analyze(bBlacklist = FALSE, bGreylist = FALSE)\n```\n:::\n\n\nFor the practical, we start from the pre-processed counts: \n\n\n::: {.cell hash='../_cache/ex_answer_part2_7490aaf1b5f0f5ea8a1d2b7b521319d2'}\n\n```{.r .cell-code}\n# start from pre-processed counts\nh2bub1_dba <- readRDS(\"preprocessed/r_objects/h2bub1_dba.count.rds\") |> \n  dba.normalize() |> \n  dba.contrast(reorderMeta = list(Treatment = \"veh\")) |> \n  dba.analyze(bBlacklist = FALSE, bGreylist = FALSE)\n\n# run the differential binding analysis\nh2bub1_diffbound <- dba.report(h2bub1_dba, th = 1)\n```\n:::\n\n\nWe can then explore our results:\n\n\n::: {.cell hash='../_cache/ex_answer_part3_c32047564cc9cc0a19dd04871f3571e0'}\n\n```{.r .cell-code}\n# summarise\nh2bub1_diffbound |> \n  filter(FDR < 0.05) |> \n  summarise(up = sum(Fold > 0), down = sum(Fold < 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 1 row and 2 columns\n         up      down\n  <integer> <integer>\n1      3283      1736\n```\n:::\n\n```{.r .cell-code}\n# correlation heatmap for the samples\nplot(h2bub1_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/ex_answer_part3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# PCA plot\ndba.plotPCA(h2bub1_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/ex_answer_part3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# MA plot\ndba.plotMA(h2bub1_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/ex_answer_part3-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# boxplot\ndba.plotBox(h2bub1_dba)\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/ex_answer_part3-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# heatmap of differentially bound peaks\ndba.plotHeatmap(h2bub1_dba, contrast = 1, correlations = FALSE, scale = \"row\")\n```\n\n::: {.cell-output-display}\n![](04-diffbind_files/figure-html/ex_answer_part3-5.png){width=672}\n:::\n:::\n\n\nIn this case there are more differentially bound peaks, and the boxplot of normalised counts between conditions is much closer between groups (although still different, which again might make biological sense). \n:::\n:::\n\n\n## Annotate peaks\n\nAs we did before, we can annotate our differentially bound peaks using `ChIPseeker`:\n\n\n::: {.cell hash='../_cache/annotate_peaks_eeb98793b212da28d040873258df366f'}\n\n```{.r .cell-code}\n# import gene annotation as a transcript database\ngenes <- GenomicFeatures::makeTxDbFromGFF(\"resources/GRCh38.109.gtf.gz\")\n\n# annotate\nbrd4_diffbound <- annotatePeak(brd4_diffbound, \n                               tssRegion = c(-3e3, 3e3),\n                               TxDb = genes) |> \n  as.GRanges()\n```\n:::\n\n\n\n## Bonus: greylists\n\nTODO\n\n\n::: {.cell hash='../_cache/unnamed-chunk-4_9a365f92529fa775d7e33b490e603df9'}\n\n:::\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- Last section of the page is a bulleted summary of the key points\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}